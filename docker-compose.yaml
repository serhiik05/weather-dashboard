version: "0.1.0"
services:
  app:
    build:
      context: .
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./vol:/app/vol
    restart: always
    command: >
      sh -c " poetry run python manage.py migrate &&
              poetry run python manage.py runserver 0.0.0.0:8000"
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery:
        condition: service_started
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=1


  db:
    image: postgres:16.0-alpine3.17
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:$PGDATA
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4.2-alpine
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  celery:
    build:
      context: .
    command: poetry run celery -A config worker --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: always
    environment:
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=redis://redis:6379/0

  celery-beat:
    build:
      context: .
    command: poetry run celery -A config beat --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      celery:
        condition: service_started
    restart: always
    environment:
        - REDIS_HOST=redis
        - CELERY_BROKER_URL=redis://redis:6379/0

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge
